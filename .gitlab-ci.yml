variables:
  CI_PROJECT_ID_PKG_LINUX: 2491

stages:
  - buildenv
  - docker
  - build

.deploy_snippet: &deploy
  - >
    if [ "${CI_COMMIT_BRANCH}" = "${CI_DEFAULT_BRANCH}" -o "${CI_BUILD_REF_NAME}" = "${CI_COMMIT_TAG}" ] ; then
      # copy deployment readme into images directory
      cp DEPLOY.md out/
      markdown DEPLOY.md > out/DEPLOY.html

      # create symbolic link to latest version
      mkdir "resctl-demo-${VERSION}"
      mv out/* resctl-demo-${VERSION}/
      ln -Tsf "resctl-demo-${VERSION}" "resctl-demo-latest"

      # create symbolic link to commit tag
      if [ ! -z "${CI_COMMIT_TAG}" ] ; then
        ln -Tsf "resctl-demo-${VERSION}" "resctl-demo-${CI_COMMIT_TAG}"
      fi

      # remove un-needed files
      rm -f resctl-demo-*.yaml resctl-demo-${VERSION}/*.img

      # install ssh key
      eval $(ssh-agent -s)
      chmod 0600 ${DEPLOY_SSH_KEY}
      ssh-add ${DEPLOY_SSH_KEY}

      # copy files to images dump
      rsync -a -e "ssh -oStrictHostKeyChecking=no" resctl-demo-* facebook@images.collabora.co.uk:images/
    fi

.deploy_ec2_ami_snippet: &deploy_ec2_ami
  - >
    if [ "${CI_COMMIT_BRANCH}" = "$CI_DEFAULT_BRANCH" -o "${CI_BUILD_REF_NAME}" = "${CI_COMMIT_TAG}" ] ; then
      # upload legacyboot image to AWS
      python3 aws-ec2/upload-image-aws-ec2.py --ami-name="resctl-demo/bookworm/${VERSION}" --ami-description="resctl-demo version ${VERSION}" --image-file="out/resctl-demo-image-legacyboot.vmdk"
    fi

buildenv:
  stage: buildenv
  tags:
    - lightweight
  image: debian:stable-slim
  script:
    - echo "VERSION=${CI_BUILD_REF_NAME}-$(date '+%Y%m%d.%H%M%S')-${CI_COMMIT_SHORT_SHA}" | tee -a build.env
  artifacts:
    reports:
      dotenv: build.env

docker:
  stage: docker
  image:
    name: gcr.io/kaniko-project/executor:debug-v0.16.0
    entrypoint: [""]
  tags:
    - lightweight
  script:
    - |
      cat << EOF > /kaniko/.docker/config.json
      {
        "auths":{
          "$CI_REGISTRY": {
            "username":"$CI_REGISTRY_USER",
            "password":"$CI_REGISTRY_PASSWORD"
          }
        }
      }
      EOF
    - >
      /kaniko/executor
      --context $CI_PROJECT_DIR
      --dockerfile $CI_PROJECT_DIR/ci-image-builder/Dockerfile
      --destination $CI_REGISTRY_IMAGE/ci-image-builder:$CI_COMMIT_REF_SLUG
      --build-arg REGISTRY=$CI_REGISTRY_IMAGE
      --single-snapshot

build:
  stage: build
  image:
    name: $CI_REGISTRY_IMAGE/ci-image-builder:$CI_COMMIT_REF_SLUG
    entrypoint: [""]
  tags:
    - kvm
  stage: build
  dependencies:
    - buildenv
  script:
    - echo "Downloading packages from CI"
    - 'curl --location --output pkg-linux.zip --header "JOB-TOKEN: $CI_JOB_TOKEN" "https://gitlab.collabora.com/api/v4/projects/${CI_PROJECT_ID_PKG_LINUX}/jobs/artifacts/debian/master/download?job=build"'
    - unzip \*.zip && rm *.zip
    - mv artifacts/ debs/

    # build regular variant
    - mkdir -p out
    - echo ${VERSION} > out/version.txt
    - debos --artifactdir=out --scratchsize=16G resctl-demo-ospack.yaml
    - debos --artifactdir=out resctl-demo-image-legacyboot.yaml
    - debos --artifactdir=out resctl-demo-image-efiboot.yaml
    - debos --artifactdir=out resctl-demo-flasher-efiboot.yaml
    - *deploy_ec2_ami
    - *deploy
  artifacts:
    paths:
      - out/*.img.gz
      - out/*.img.gz.sha256
    expire_in: 1 week

build-meta:
  stage: build
  image:
    name: $CI_REGISTRY_IMAGE/ci-image-builder:$CI_COMMIT_REF_SLUG
    entrypoint: [""]
  tags:
    - kvm
  stage: build
  dependencies:
    - buildenv
  script:
    - echo "Downloading packages from CI"
    - 'curl --location --output pkg-linux.zip --header "JOB-TOKEN: $CI_JOB_TOKEN" "https://gitlab.collabora.com/api/v4/projects/${CI_PROJECT_ID_PKG_LINUX}/jobs/artifacts/debian/master/download?job=build"'
    - unzip \*.zip && rm *.zip
    - mv artifacts/ debs/

    # build meta variant
    - mkdir -p out
    - echo ${VERSION} > out/version.txt
    - debos --artifactdir=out --scratchsize=16G -t "variant:resctl-demo-meta" resctl-demo-ospack.yaml
    - debos --artifactdir=out -t "variant:resctl-demo-meta" resctl-demo-image-efiboot.yaml
    - debos --artifactdir=out -t "variant:resctl-demo-meta" resctl-demo-flasher-efiboot.yaml
    - *deploy
  artifacts:
    paths:
      - out/*.img.gz
      - out/*.img.gz.sha256
    expire_in: 1 week
