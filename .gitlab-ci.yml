variables:
  CI_PROJECT_ID_PKG_LINUX: 2491
  CI_PROJECT_ID_PKG_RESCTL_DEMO: 2482

stages:
  - docker
  - build

.deploy_snippet: &deploy
  - >
    if [ "${CI_COMMIT_BRANCH}" == "master" ]; then
      # move artifacts into their own directory
      OUT="resctl-demo-${VERSION}"
      mkdir "${OUT}"
      mv "latest-version.txt" "${OUT}/"
      for F in "${IMAGE_LEGACY}" "${IMAGE_EFI}" "${IMAGE_EFI_FLASHER}" ; do
        mv "${F}.img.gz" "${OUT}/"
        mv "${F}.img.gz.sha256" "${OUT}/"
        mv "${F}.img.bmap" "${OUT}/"
      done

      # install ssh key
      eval $(ssh-agent -s)
      chmod 0600 ${DEPLOY_SSH_KEY}
      ssh-add ${DEPLOY_SSH_KEY}

      # copy files to images dump
      scp -oStrictHostKeyChecking=no -r ${OUT} facebook@images.collabora.co.uk:images/
    fi

.deploy_ec2_ami_snippet: &deploy_ec2_ami
  - >
    if [ "${CI_COMMIT_BRANCH}" == "master" ]; then
      # upload legacyboot image to AWS
      python3 ../aws-ec2/upload-image-aws-ec2.py --ami-name="resctl-demo/bullseye/${VERSION}" --ami-description="resctl-demo version ${VERSION}" --image-file="${IMAGE_LEGACY}.vmdk"
    fi

docker:
  stage: docker
  image:
    name: gcr.io/kaniko-project/executor:debug-v0.16.0
    entrypoint: [""]
  tags:
    - lightweight
  script:
    - |
      cat << EOF > /kaniko/.docker/config.json
      {
        "auths":{
          "$CI_REGISTRY": {
            "username":"$CI_REGISTRY_USER",
            "password":"$CI_REGISTRY_PASSWORD"
          }
        }
      }
      EOF
    - >
      /kaniko/executor
      --context $CI_PROJECT_DIR
      --dockerfile $CI_PROJECT_DIR/ci-image-builder/Dockerfile
      --destination $CI_REGISTRY_IMAGE/ci-image-builder:$CI_COMMIT_REF_SLUG
      --build-arg REGISTRY=$CI_REGISTRY_IMAGE
      --single-snapshot

build:
  stage: build
  image:
    name: $CI_REGISTRY_IMAGE/ci-image-builder:$CI_COMMIT_REF_SLUG
    entrypoint: [""]
  tags:
    - kvm
  stage: build
  script:
    - echo "Downloading packages from CI"
    - 'curl --location --output pkg-linux.zip --header "JOB-TOKEN: $CI_JOB_TOKEN" "https://gitlab.collabora.com/api/v4/projects/${CI_PROJECT_ID_PKG_LINUX}/jobs/artifacts/debian/master/download?job=build"'
    - 'curl --location --output pkg-resctl-demo.zip --header "JOB-TOKEN: $CI_JOB_TOKEN" "https://gitlab.collabora.com/api/v4/projects/${CI_PROJECT_ID_PKG_RESCTL_DEMO}/jobs/artifacts/debian/master/download?job=build"'
    - unzip \*.zip && rm *.zip
    - mv artifacts/ debs/

    - echo "Downloading linux payload"
    - 'curl --location --output linux.tar.xz "https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.8.11.tar.xz"'
    - xz -d linux.tar.xz
    - mv linux.tar overlays/resctl-demo/usr/local/resctl-demo

    - export VERSION="$(date '+%Y%m%d.%H%M%S')-${CI_COMMIT_SHORT_SHA}"
    - export IMAGE_LEGACY="resctl-demo-image-legacyboot_${VERSION}"
    - export IMAGE_EFI="resctl-demo-image-efiboot_${VERSION}"
    - export IMAGE_EFI_FLASHER="resctl-demo-flasher-efiboot_${VERSION}"
    - mkdir out && cd out
    - echo ${VERSION} > latest-version.txt
    - debos --scratchsize=16G ../resctl-demo-ospack.yaml
    - debos -t "image:${IMAGE_LEGACY}" ../resctl-demo-image-legacyboot.yaml
    - debos -t "image:${IMAGE_EFI}" ../resctl-demo-image-efiboot.yaml
    - debos -t "image:${IMAGE_EFI_FLASHER}" -t "flash_image:${IMAGE_EFI}" ../resctl-demo-flasher-efiboot.yaml
    - *deploy_ec2_ami
    - *deploy
